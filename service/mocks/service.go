// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "task/dto"
	models "task/models"

	gomock "github.com/golang/mock/gomock"
)

// MockINotificationService is a mock of INotificationService interface.
type MockINotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationServiceMockRecorder
}

// MockINotificationServiceMockRecorder is the mock recorder for MockINotificationService.
type MockINotificationServiceMockRecorder struct {
	mock *MockINotificationService
}

// NewMockINotificationService creates a new mock instance.
func NewMockINotificationService(ctrl *gomock.Controller) *MockINotificationService {
	mock := &MockINotificationService{ctrl: ctrl}
	mock.recorder = &MockINotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationService) EXPECT() *MockINotificationServiceMockRecorder {
	return m.recorder
}

// AssignDelay mocks base method.
func (m *MockINotificationService) AssignDelay(c context.Context, request dto.AssignDelayRequest) (dto.AssignDelayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDelay", c, request)
	ret0, _ := ret[0].(dto.AssignDelayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDelay indicates an expected call of AssignDelay.
func (mr *MockINotificationServiceMockRecorder) AssignDelay(c, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDelay", reflect.TypeOf((*MockINotificationService)(nil).AssignDelay), c, request)
}

// DelayReport mocks base method.
func (m *MockINotificationService) DelayReport(ctx context.Context, request dto.DelayReportRequest) (dto.DelayReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelayReport", ctx, request)
	ret0, _ := ret[0].(dto.DelayReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelayReport indicates an expected call of DelayReport.
func (mr *MockINotificationServiceMockRecorder) DelayReport(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelayReport", reflect.TypeOf((*MockINotificationService)(nil).DelayReport), ctx, request)
}

// ReportDelay mocks base method.
func (m *MockINotificationService) ReportDelay(ctx context.Context) ([]models.VendorDelay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportDelay", ctx)
	ret0, _ := ret[0].([]models.VendorDelay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportDelay indicates an expected call of ReportDelay.
func (mr *MockINotificationServiceMockRecorder) ReportDelay(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportDelay", reflect.TypeOf((*MockINotificationService)(nil).ReportDelay), ctx)
}
