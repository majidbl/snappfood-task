// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "task/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIAgent is a mock of IAgent interface.
type MockIAgent struct {
	ctrl     *gomock.Controller
	recorder *MockIAgentMockRecorder
}

// MockIAgentMockRecorder is the mock recorder for MockIAgent.
type MockIAgentMockRecorder struct {
	mock *MockIAgent
}

// NewMockIAgent creates a new mock instance.
func NewMockIAgent(ctrl *gomock.Controller) *MockIAgent {
	mock := &MockIAgent{ctrl: ctrl}
	mock.recorder = &MockIAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAgent) EXPECT() *MockIAgentMockRecorder {
	return m.recorder
}

// CreateAgent mocks base method.
func (m *MockIAgent) CreateAgent(ctx context.Context, agent *models.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", ctx, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockIAgentMockRecorder) CreateAgent(ctx, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockIAgent)(nil).CreateAgent), ctx, agent)
}

// GetAgent mocks base method.
func (m *MockIAgent) GetAgent(ctx context.Context, id int64) (models.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", ctx, id)
	ret0, _ := ret[0].(models.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockIAgentMockRecorder) GetAgent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockIAgent)(nil).GetAgent), ctx, id)
}

// UpdateAgent mocks base method.
func (m *MockIAgent) UpdateAgent(ctx context.Context, agent *models.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", ctx, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockIAgentMockRecorder) UpdateAgent(ctx, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockIAgent)(nil).UpdateAgent), ctx, agent)
}
