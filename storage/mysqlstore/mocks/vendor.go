// Code generated by MockGen. DO NOT EDIT.
// Source: vendor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "task/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIVendor is a mock of IVendor interface.
type MockIVendor struct {
	ctrl     *gomock.Controller
	recorder *MockIVendorMockRecorder
}

// MockIVendorMockRecorder is the mock recorder for MockIVendor.
type MockIVendorMockRecorder struct {
	mock *MockIVendor
}

// NewMockIVendor creates a new mock instance.
func NewMockIVendor(ctrl *gomock.Controller) *MockIVendor {
	mock := &MockIVendor{ctrl: ctrl}
	mock.recorder = &MockIVendorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVendor) EXPECT() *MockIVendorMockRecorder {
	return m.recorder
}

// GetVendorsTotalDelay mocks base method.
func (m *MockIVendor) GetVendorsTotalDelay(ctx context.Context) ([]models.VendorDelay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVendorsTotalDelay", ctx)
	ret0, _ := ret[0].([]models.VendorDelay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVendorsTotalDelay indicates an expected call of GetVendorsTotalDelay.
func (mr *MockIVendorMockRecorder) GetVendorsTotalDelay(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendorsTotalDelay", reflect.TypeOf((*MockIVendor)(nil).GetVendorsTotalDelay), ctx)
}
